<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gamedev Journey Blog]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://commonparrot.github.io/</link><image><url>.\https:\\commonparrot.github.io\lib\media\favicon.png</url><title>Gamedev Journey Blog</title><link>https://commonparrot.github.io/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 26 Jun 2025 09:47:13 GMT</lastBuildDate><atom:link href=".\https:\\commonparrot.github.io\lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 26 Jun 2025 09:47:11 GMT</pubDate><copyright><![CDATA[CommonParrot]]></copyright><ttl>60</ttl><dc:creator>CommonParrot</dc:creator><item><title><![CDATA[Blobby]]></title><description><![CDATA[ 
 Godot 3.6 + GDScript,Game Design,Level Design,2D platformer & puzzle logic,Collaboration with artists,[[Cool Features | Short clips of cool features]]]]></description><link>.\https:\\commonparrot.github.io\games-🎮\blobby.html</link><guid isPermaLink="false">Games 🎮/Blobby.md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Thu, 23 May 2024 11:49:04 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\lib\media\blobby_thumbnail_3.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\lib\media\blobby_thumbnail_3.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Hypnagogia (GameJam Project)]]></title><description><![CDATA[ 
 Godot 4.1 + GDScript,Sound design,Character controls & movement,Particle effects in Godot,Noise based materials,Rapid iteration and collaboration with heavy useage of GIT]]></description><link>.\https:\\commonparrot.github.io\games-🎮\hypnagogia-(game-jam-project).html</link><guid isPermaLink="false">Games 🎮/Hypnagogia (Game Jam Project).md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Thu, 23 May 2024 11:46:43 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\lib\media\hypnagogia_thumbnail.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\lib\media\hypnagogia_thumbnail.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Snacke]]></title><description><![CDATA[ 
 🐍]]></description><link>.\https:\\commonparrot.github.io\games-🎮\snacke.html</link><guid isPermaLink="false">Games 🎮/Snacke.md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Thu, 23 May 2024 11:47:05 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\lib\media\snacke_thumbnail.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\lib\media\snacke_thumbnail.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Space Smash Out]]></title><description><![CDATA[ 
 Unity + C#,Rigidbody controls,Collider interactions]]></description><link>.\https:\\commonparrot.github.io\games-🎮\space-smash-out-(first-prototype).html</link><guid isPermaLink="false">Games 🎮/Space Smash Out (First Prototype).md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Thu, 23 May 2024 11:54:47 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\lib\media\sso_thumbnail-2.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\lib\media\sso_thumbnail-2.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Space Smash Out]]></title><description><![CDATA[ 
 Unity + C#,URP, ShaderLab, HLSL, ShaderGraph,particle effects,Scene and assets management,integrating & repurposing store assets]]></description><link>.\https:\\commonparrot.github.io\games-🎮\space-smash-out-(wip).html</link><guid isPermaLink="false">Games 🎮/Space Smash Out (WIP).md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Mon, 08 Jul 2024 14:22:08 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\lib\media\sso_screenshot4.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\lib\media\sso_screenshot4.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Cool Features in Blobby]]></title><description><![CDATA[ 
 <br><br>Hi there 🙋‍♂️<br>
With this post I want to present to you some of the cool features which made it into <a data-href="Blobby" href=".\https:\\commonparrot.github.io\games-🎮\blobby.html" class="internal-link" target="_self" rel="noopener nofollow">Blobby</a>. This is a collection of small clips, no implementation details or anything like that. So in no particular order:<br><br>I explained how this works exactly over here: <a data-href="Springs" href=".\https:\\commonparrot.github.io\posts-📰\springs.html" class="internal-link" target="_self" rel="noopener nofollow">Springs</a><br><br><br><br>The camera adapts to Blobby's movement direction, when he moves towards<br>
an edge of the screen at a certain speed for some amount of time.<br><br><br><br>It reacts to the players velocity and even considers the draft when running by.<br><br><br><br>The froggies are your friends in this game, they will target and eat the flyers, unlocking previously blocked paths. They can also jump through the levels while avoiding obvious dangers. It is one of the games main goals to free them all from their chains.<br>The chains consists of rigid body links spawned in at runtime, up to the desired length. They could be used to calculate forces, but now it only looks like the frog is held back by the chain itself.<br><br><br><br>The flyer might be a bit stupid...<br>
But he doesn't get caught on edges easily and (almost) always<br>
finds a way to chase and annoy you😈🦟<br>
The method for avoiding getting caught on edges is inspired by and a more simplified<br>
version of this: <a rel="noopener nofollow" class="external-link" href="https://youtu.be/4ryNGS3kKHw?si=ELQFlA5G-wIiVQiu&amp;t=377" target="_blank">https://youtu.be/4ryNGS3kKHw?si=ELQFlA5G-wIiVQiu&amp;t=377</a><br><br><br><br>They give you the information you need at the right time<br>
and if you ignore them for a while....<br><br><br><br>It might seem trivial, but this took some effort and improves usability a lot!<br><br>]]></description><link>.\https:\\commonparrot.github.io\posts-📰\cool-features.html</link><guid isPermaLink="false">Posts 📰/Cool Features.md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Mon, 22 Jul 2024 14:47:34 GMT</pubDate></item><item><title><![CDATA[How to make a snake bend]]></title><description><![CDATA[ 
 <br><br><img alt="snacke_screenshot.png" src=".\https:\\commonparrot.github.io\lib\media\snacke_screenshot.png"><br><br>I started to develop this small snake clone with a friend, who knew a lot about<br>
software development, but didn't develop a game before and didn't have any<br>
experience with Godot.<br>
In preparation for a game jam, we wanted to produce a small game,<br>
to learn how we could work together as two developers on a small code base.<br>
We took a few hours of our Sunday to do this and didn't get very far...<br>
But we had a solid foundation, he learned a lot about Godot and also made me consider some interesting system design choices.<br>
As he had little time to finish this small project, I continued for some 12-15h<br>
finishing this game. <br>Take a look at it here: <a data-href="Snacke" href=".\https:\\commonparrot.github.io\games-🎮\snacke.html" class="internal-link" target="_self" rel="noopener nofollow">Snacke</a>,  there's also a link to the projects repository.<br>Probably the most interesting bit about this development process was<br>
figuring out how to orient the snake bodies sprites relative to each other.<br><br><br>So the snake is made up of a linked list of SnakeParts, which this code is from.<br>
Each part has the part in front and at the back of it as references.<br>
If there is no front or back part, the part is considered the head or the tail of the snake.<br>
<br>
The heading_direction parameter for adjust_sprite is the direction this snake part<br>
moved in last, adjusted for teleportation.<br># Adjusts the sprite of a snake part to fit in with it's neighbours
func adjust_sprite(heading_direction: Vector2, 
regular_move_distance: float) -&gt; void:

    # Part is head
    if (front_part == null):
        set_sprite(0, direction_to_sprite_rotation(heading_direction))
        return
    
    # Checks the direction of the front part by comparing positions
    var front_direction: Vector2 = 
        teleport_to_regular_move(front_part.position - position, 
        regular_move_distance).normalized()

    # Angle of the direction this part moved towards last turn, relative
    # to the direction the part which is in front of this one is in. 
    var front_turn_angle: float =
        heading_direction.angle_to(front_direction)

    # Part is tail
    if (back_part == null):
        set_sprite(3, direction_to_sprite_rotation(front_direction))
        return

    # Part is straight
    if(front_turn_angle == 0):
        set_sprite(1, direction_to_sprite_rotation(front_direction))
        return


    # Determine fitting bend sprite
    
    set_sprite(2, direction_to_sprite_rotation(heading_direction))
    # There are only left and right bends, 
    # if you take the movement direction of the snake part as the 
    # "up" reference direction.
    # The default is the left bend

    # The case for a right bend
    if(front_turn_angle &gt; 0):
        set_sprite(2, direction_to_sprite_rotation(
        heading_direction.normalized().rotated(deg_to_rad(-90))))
        return
<br><br><br># Maps the four directional Vectors right,left,down, 
# up to the fitting rotation of the snake sprites. 
# Depends on the provided sprites.
func direction_to_sprite_rotation(dir: Vector2) -&gt; float:
    var direction: Vector2 = dir.normalized()
    if direction.is_equal_approx(Vector2(1,0)):
        return deg_to_rad(90)

    if direction.is_equal_approx(Vector2(-1,0)):
        return deg_to_rad(-90)

    if direction.is_equal_approx(Vector2(0,1)):
        return deg_to_rad(180)

    if direction.is_equal_approx(Vector2(0,-1)):
        return deg_to_rad(0)

    return 0
<br><br>
<br>
When a part teleports to the other side of the field, it reappears behind the part<br>
it was in front/to the side of. With this method I check if that has happend<br>
and return the direction as if the part didn't teleport.<br># If the part is teleported to the other side of the field
# this will translate the move into a regular move without teleportation.
func teleport_to_regular_move(displacement: Vector2, regular_move_distance) -&gt; Vector2:

    if displacement.length() &lt;= regular_move_distance:
        return displacement

    if displacement.normalized().is_equal_approx(Vector2(-1,0)):
        return Vector2(1, 0)

    if displacement.normalized().is_equal_approx(Vector2(1,0)):
        return Vector2(-1, 0)

    if displacement.normalized().is_equal_approx(Vector2(0,-1)):
        return Vector2(0, 1)

    if displacement.normalized().is_equal_approx(Vector2(0,1)):
        return Vector2(0, -1)

    return Vector2(0,0)
]]></description><link>.\https:\\commonparrot.github.io\posts-📰\how-to-make-a-snake-bend.html</link><guid isPermaLink="false">Posts 📰/How to make a snake bend.md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Thu, 11 Jul 2024 14:39:18 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\lib\media\snacke_screenshot.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\lib\media\snacke_screenshot.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Springs in Blobby]]></title><description><![CDATA[ 
 <br><br> <br>
I really wanted to get some of the game feel of the brilliant N++ into <a data-href="Blobby" href=".\https:\\commonparrot.github.io\games-🎮\blobby.html" class="internal-link" target="_self" rel="noopener nofollow">Blobby</a>,<br>
as it was my biggest inspiration to begin with.<br>
In N++ the physics and dynamic nature of some obstacles are the MVPs,<br>
right after the character movement (which I didn't plan to replicate).<br>
<br>
One of the more interesting obstacles/platforms were the bouncy cubes.<br>
You see what I mean if you watch this gameplay:<br>
<br>
<br>
<br>
<br>
<br>
From that came the idea to implement a spring platform for Blobby,<br>
which behaved like a real spring would.<br>
For it's gameplay I only needed it to be interactable from above,<br>
not from all sides like in N++.<br>
<br>
And so I took a look into my Tafelwerk (collection of formulas<a data-footref="1" href=".\https:\\commonparrot.github.io\about:blank#fn-1-4dfe6ec428802f14" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>),<br>
which was collecting dust for too many years, to piece together the physical formulas which would allow me to get a spring-like behavior.<br>
<br>
This is how it looks in the game:<br>
<br>
<br>
<br>
<br>
<br>
It is probably worth to note, that if you are dealing with interactions between rigid bodies, Godot's dampened spring joint would be a more sensible alternative to this.<br>
But in my case much depended on Blobby being a KinematicBody2D instead.<br>
<br>
While the KinematicBody2D offers more direct control over Blobby's movement,<br>
it is mostly incompatible with the built-in physics objects which Godot offers.<br>
<br>
The implementation of my spring only consists of three parts:<br>
<br><br><br><br> <br>
For the initial reaction of the spring I used this formula:<br> <br><br> <br>
The result is a velocity which the spring platform and incoming body share.<br>
For reliability reasons, the velocity of an incoming body is detected via an Area2D,<br>
which is placed slightly above the springs surface, before actual contact is made.<br>
(collision code:<a data-footref="2" href=".\https:\\commonparrot.github.io\about:blank#fn-2-4dfe6ec428802f14" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>)<br>func body_on_spring() -&gt; void:
    var a_vel = stored_incoming_velocity
    var a_mass = coupled_body().mass
    var b_vel = y_velocity
    var b_mass = mass
    y_velocity +=  (a_mass * a_vel + b_mass * b_vel)/(a_mass + b_mass)
    stored_incoming_velocity = 0
    shock_ready = false
<br> <br><br><br><br> <br>
In the physics_process function of the spring, it's velocity is calculated.<br>
In Godot the physics process of each node is executed at a fixed rate<br>
(in contrast to the frame rate dependent process function), in Blobby it's 60Hz.<br>
First I calculate the resulting force acting on the spring, by adding up the opposing forces:<br> <br><br> <br>
The mass here is the mass of the spring platform itself together with a body,<br>
which might have jumped on it.<br>
On the code side, I first register if a body has entered the spring platform,<br>
calculating a inelastic shock with the platform if so.<br>
Then I calculate the resulting force like above. From that I get the acceleration<br>
and use the delta time to calculate the current velocity.<br> <br><br> <br>func _physics_process(delta: float) -&gt; void:
    var bc = body_contact()
    if !bc:
        shock_ready = true
    if bc &amp;&amp; shock_ready:
        body_on_spring()

    var spring_force = spring_k * (self.start_y - self.position.y)
    if coupled_body() != null:
        coupled_mass = mass + coupled_body.mass
    else:
        coupled_mass = mass

    var weight_force = coupled_mass * PhysicsConst.gravity
    var result_force = weight_force + spring_force
    y_velocity += (result_force/coupled_mass) * delta

    y_velocity *= friction
    
    # This changes the position of the platform independently 
    # from godot physics
    # Blobby then reacts through godot physics with move_and_slide
    self.position.y += y_velocity * delta
<br>I also use a friction variable between 0 and 1, which I apply to the velocity,<br>
so that the spring won't oscillate forever.<br>
(the code for body_contact: <a data-footref="3" href=".\https:\\commonparrot.github.io\about:blank#fn-3-4dfe6ec428802f14" class="footnote-link" target="_self" rel="noopener nofollow">[3]</a> and body exiting: <a data-footref="4" href=".\https:\\commonparrot.github.io\about:blank#fn-4-4dfe6ec428802f14" class="footnote-link" target="_self" rel="noopener nofollow">[4]</a>)<br> <br><br><br><br> <br>
When the spring is stretched out, be it by the weight of the platform itself or<br>
the combined weight together with a body (player/creature), it results in<br>
some potential energy being stored within the spring. This is calculated<br>
once a body is leaving the Area2D of the spring, giving some of the springs<br>
potential energy back to the body, resulting in a higher jump.<br>The resulting velocity is calculated by replacing  with  and solving for :<br> <br><br> <br>
And here is the code for that, including the ratio of the spring platforms weight itself<br>
to the body resting on it, the direction of the resulting velocity and avoiding divisions by , when the mass of the body resting on the spring gets too low:<br>func _on_SpringSkin_area_exited(_area: Area2D) -&gt; void:
    var displacement = self.position.y - self.start_y
    var potential_spring_energy = spring_k * 0.5 * pow(displacement, 2)
    var mass_ratio = 1 - mass / coupled_mass
    var transferred_kinetic_energy = potential_spring_energy * mass_ratio
    var kinetic_energy_in_velocity = (
        -sign(displacement)
        * sqrt(
                2 * transferred_kinetic_energy /
                 max(coupled_mass - mass, 0.001) 
        )
    )
    if coupled_body() != null:
        # This directly applies a velocity to the coupled body
        coupled_body().velocity.y += kinetic_energy_in_velocity
        coupled_body_ref = weakref(null)
        spring_sound_armed = true
<br><br>
The "SpringSkin" here is the Area2D of the spring platform, which triggers<br>
interactions when recognized areas are entering, resting in or leaving.<br>
The function itself is connected to and triggered by a signal of this Area2D instance.<br>If I pick up this mechanic for another game, I would probably make it so that the spring accounts for many bodies resting on it, by expanding on the coupled_body variable.<br>
The velocity is also directly applied to the coupled body from the outside,<br>
this could be problematic, if I add many more such interactions. <br>If my player randomly gets catapulted across a level it would be hard to trace which mechanic caused the velocity change in the player character.<br>
One idea for the future would be to gather these sorts of physics influences,<br>
in a script of it's own to make them traceable, detect anomalies and apply a single resulting force to the player.<br>
But for the scope of this game/demo this implementation will suffice.<br>
<br><br><br><br> <br>
The spring is easily one of the most satisfying mechanics in the game right now,<br>
if you learn how to use it. With the tweaks I made to the gravity in the game,<br>
the spring constant, the friction and the weight of the spring platform, a big boost<br>
in jump height is more likely than a failed, dampened jump.<br>But I noticed that one play tester wasn't intuitively waiting for the spring to stretch<br>
before jumping again, loosing a lot of momentum, causing frustration.<br>
I think this indicates that consistent feedback of springs, more independent from players gaming history and skill, could be more suitable for the widest possible player base, even with the trade-off of mechanical depth.<br>It might also be mitigated a bit by changing the visuals, to a representation of<br>
a real spring and or adding a color indication, for how much potential energy is<br>
in the stretched spring. I might add that in the future, but for now<br>
I enjoy that I could bring some of the mechanical depth of N++ over to Blobby😄<br><br><br><br><br>
<br>
<br>A collection of formulas and tables for STEM subjects in german high school. There are books like that in many countries. It's called Binas in the netherlands and Maol Taulukot in finland.<a href=".\https:\\commonparrot.github.io\about:blank#fnref-1-4dfe6ec428802f14" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>func _on_EnteringVelocityDetector_area_entered(area: Area2D) -&gt; void:
    # The allowed areas are limited by using layers in the Godot editor
	if area.get_parent().velocity.y &gt; 0:
		stored_incoming_velocity = area.get_parent().velocity.y

<a href=".\https:\\commonparrot.github.io\about:blank#fnref-2-4dfe6ec428802f14" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>var coupled_body_ref = weakref(null)
func coupled_body():
    return coupled_body_ref.get_ref()
func _body_contact() -&gt; bool:
    var areas: Array = $SpringSkin.get_overlapping_areas()
    for i in range(0, areas.size()):
        if !areas[i].get_parent().is_class("PhysicsBody2D"):
            continue
        if !areas[i].get_parent().is_on_floor():
            return false
        coupled_body_ref = weakref(areas[i].get_parent())
        return true
    return false

<a href=".\https:\\commonparrot.github.io\about:blank#fnref-3-4dfe6ec428802f14" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>func _on_EnteringVelocityDetector_area_exited(area: Area2D) -&gt; void:
    if area.get_parent().is_class("PhysicsBody2D") &amp;&amp; spring_sound_armed:
        $SpringSound.play()
        spring_sound_armed = false
<a href=".\https:\\commonparrot.github.io\about:blank#fnref-4-4dfe6ec428802f14" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>.\https:\\commonparrot.github.io\posts-📰\springs.html</link><guid isPermaLink="false">Posts 📰/Springs.md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Fri, 16 Feb 2024 14:26:18 GMT</pubDate></item><item><title><![CDATA[About]]></title><description><![CDATA[ 
 <br><br>Hi, I'm Jakob aka CommonParrot 👋🦜<br>As a Godot and Unity gameplay programmer I enjoy building games and learning how to create a unique and enjoyable experience with them. I'm especially motivated when collaborating with creatives like game designers, visual artists and audio engineers, understanding their intent and making their creations shine in an interactive experience.<br>Since I was the sole developer in most of my projects until now, my most used concrete skills are building state machines, menus and basic game systems, like scoring and game conditions. I also got a little deeper into setting up inverse kinematics, camera controls and platforming physics.<br>I think it's fundamental to communicate a game's vibe over the whole range of feedback the player gets from it. Being deliberate with this is essential to getting across an artistic vision. This doesn't only include character movement and interactions with the environment, but also everything from tutorials to UI.<br>
My favorite examples for this and all-time favorite games are Super Metroid and Dark Souls!<br><br><br><br>This is an adventure and exploration game about studying a journal, which contains descriptions of various creatures called Yokai. Find out which Yokai is haunting the house and vanquish it using the hints from the journal and items in the area!<br>Made in 9 days for the Godot Wild Jam 70. Our team was great and contributed awesome art, assets and music! I was the sole programmer on the project; integrating everything into the engine.<br>The released version can be found here: <a rel="noopener nofollow" class="external-link" href="https://commonparrot.itch.io/harae" target="_blank">https://commonparrot.itch.io/harae</a><br>In the video you can see me just exploring the area a bit.<br>Skills used:<br>
<br>Godot 4.3, GDScript
<br>Enemy AI with a mixed state machine
<br>Interactable and dynamic environment
<br>Basic items system
<br>Scene &amp; Assets Management
<br><img alt="3.png" src=".\https:\\commonparrot.github.io\images_harae\3.png" style="width: 755px; max-width: 100%;"><br>
<img alt="1.png" src=".\https:\\commonparrot.github.io\images_harae\1.png" style="width: 755px; max-width: 100%;"><br><br><br>For this game I envisioned a platformer with unique inertia based movement, a focus on environment dependent puzzles, friendly AI companions which are useful as well and level exploration.<br>
My plans were a bit too grand for a first project and a limited time frame, but the demo I finished get's across the ideas I was going for pretty well.<br>This was my first game development project. I made everything myself except most of the artworks, which I commissioned, were contributed by a friend (he brought THE iconic Blobby to life) or bought.<br>Below you can watch me play through a level and I also posted some short clips about it's features over here: <a data-href="Cool Features" href=".\https:\\commonparrot.github.io\posts-📰\cool-features.html" class="internal-link" target="_self" rel="noopener nofollow">Cool Features</a><br>Skills used:<br>
<br>Godot 3.6 + GDScript
<br>Game Design
<br>Level Design
<br>Menus, save system &amp; remappable controls
<br>2D platformer physics &amp; puzzle logic
<br>Scene Management
<br><img alt="blobby_screenshot4.png" src=".\https:\\commonparrot.github.io\images_blobby\blobby_screenshot4.png"><br><br><br>A game about pushing or shooting each other out of an arena under changing gravity and movement conditions.<br>I based it on an earlier prototype, which promised to be fun and tried to build it right from the ground up, getting into Unity on a deeper level.<br>I abandoned this project. Ultimately I couldn't see my initial idea becoming a fleshed out game, because of overscope and immature game design. But I still learned a lot, had a lot of fun working on it and I hope that shows!<br>Skills used:<br>
<br>Advanced Unity + C#
<br>Scene and assets management
<br>Integrating &amp; repurposing store assets
<br>URP, ShaderLab, HLSL, ShaderGraph
<br>Online Lobby with FishNet(Mirror)
<br>Particle effects
<br><br>
<img alt="vlcsnap-2024-07-11-17h22m09s154.png" src=".\https:\\commonparrot.github.io\images_sso\vlcsnap-2024-07-11-17h22m09s154.png" style="width: 755px; max-width: 100%;"><br>
<img alt="vlcsnap-2024-07-11-17h22m45s975.png" src=".\https:\\commonparrot.github.io\images_sso\vlcsnap-2024-07-11-17h22m45s975.png" style="width: 755px; max-width: 100%;"><br>
<img alt="vlcsnap-2024-07-11-17h22m29s710.png" src=".\https:\\commonparrot.github.io\images_sso\vlcsnap-2024-07-11-17h22m29s710.png" style="width: 755px; max-width: 100%;"><br><br><br>A small game about pushing each other out of the arena under changing gravity and movement conditions. Made to get into Unity. Can be played with two people on one keyboard at: <a rel="noopener nofollow" class="external-link" href="https://commonparrot.itch.io/space-smash-out" target="_blank">https://commonparrot.itch.io/space-smash-out</a><br>Skills used:<br>
<br>Unity Basics
<br>Physics based character controls with changing influencing forces
<br>Basic shader programming in HLSL
<br>Collider interactions
<br><img alt="SSO_screenshot3.png" height="450" src=".\https:\\commonparrot.github.io\images_sso\sso_screenshot3.png" style="width: 755px; max-width: 100%;"><br>
<img alt="SSO_screenshot2.png" height="450" src=".\https:\\commonparrot.github.io\images_sso\sso_screenshot2.png" style="width: 755px; max-width: 100%;"><br><br><br>Our entry for the 3-Day Mini Jam 144 with the theme nightmare. Developed together with a friend who was new to Godot.<br>It is a high score game in which you have to avoid obstacles and collect bonus orbs while falling towards an eldritch horror.<br>Skills used:<br>
<br>Godot 4.1 + GDScript
<br>Sound design
<br>Character controls &amp; movement
<br>Particle effects
<br>Noise based materials
<br>Rapid iteration and collaboration with heavy usage of GIT
<br><img alt="hypnagogia_screenshot.png" src=".\https:\\commonparrot.github.io\images_hypnagogia\hypnagogia_screenshot.png" style="width: 755px; max-width: 100%;"><br>
<img alt="hypnagogia_screenshot_2.png" src=".\https:\\commonparrot.github.io\images_hypnagogia\hypnagogia_screenshot_2.png" style="width: 755px; max-width: 100%;"><br><br><br>A really simple snake clone to teach a friend Godot basics.<br>
It's open source: <a rel="noopener nofollow" class="external-link" href="https://github.com/CommonParrot/Snacke/tree/dev-jakob" target="_blank">https://github.com/CommonParrot/Snacke/tree/dev-jakob</a><br>Skills used:<br>
<br>🐍
<br>Godot 4.1 + GDScript
<br>Scene Management
<br>Signals
<br><img alt="snacke_screenshot.png" src=".\https:\\commonparrot.github.io\images_snacke\snacke_screenshot.png" style="width: 755px; max-width: 100%;"><br><br>This blog is powered by the awesome Obsidian<br>
and the equally awesome HTML export plugin.<br>
<a rel="noopener nofollow" class="external-link" href="https://obsidian.md/" target="_blank">https://obsidian.md/</a><br>
<a rel="noopener nofollow" class="external-link" href="https://github.com/KosmosisDire/obsidian-webpage-export" target="_blank">https://github.com/KosmosisDire/obsidian-webpage-export</a>]]></description><link>.\https:\\commonparrot.github.io\about.html</link><guid isPermaLink="false">About.md</guid><dc:creator><![CDATA[CommonParrot]]></dc:creator><pubDate>Thu, 26 Jun 2025 09:39:58 GMT</pubDate><enclosure url=".\https:\\commonparrot.github.io\images_harae\3.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=".\https:\\commonparrot.github.io\images_harae\3.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>